/*This file was produced by Simone Lionetti using a Mathematica script*/

// Master n. 29: box((-s12-s13-s14-s23-s24),(s12+s14+s24),s12)

// Coefficient order epsilon^0 of master 29
template<>
double qq2yygCAm2CF<29,0>(const double& s12, const double& s13, const double& s14, const double& s23, const double& s24)
{
    return (-2*(s12+s23+s24)*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*pow((-s12-s13-s14),-1)*pow(s23,-1)-2*s14*(s12+s13+s14)*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*pow(s13,-1)*pow((-s12-s13-s14),-1)*pow(s24,-1)+2*pow(s13,-1)*(4*s12*s13*s14-4*s13*s14*s24-2*(2*s13+3*s14-s24)*(s12*s12)-2*s12*(s13*s13)-2*(s14+s24)*(s13*s13)+6*s12*(s14*s14)-4*s13*(s14*s14)-2*s24*(s14*s14)+2*pow(s12,3)-2*pow(s14,3)-2*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(3*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)+2*(2*s12-s13-2*s14)*(2*s12*(s13*s24*(s13+s23+s24)+s23*(s14*s14))+s12*s12*(2*s13*(s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(s12*(-3*s13-6*s14+s24)+(s13+s14)*(3*s14+s24)+3*(s12*s12))*pow(s12+s13+s23,-1))*pow(s24,-1)+2*pow(s13,-1)*(4*s12*s13*s14+4*s12*s14*s24+2*s13*s14*s24+4*(s13+2*s14)*(s12*s12)+6*s12*(s14*s14)+2*s13*(s14*s14)+2*s24*(s14*s14)+4*pow(s12,3)+2*pow(s14,3)-2*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(3*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)+2*(3*s12+s13+2*s14)*(s12*s12*(4*s14*s23+2*s13*(s14+s23)+s13*s13+s14*s14+s23*s23+s24*s24)+2*s12*(s14*s23*(s14+s23)+s13*(s14*s23+s24*s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(4*s12*(s13+2*s14)+s14*(2*s13+3*s14+s24)+6*(s12*s12))*pow(s12+s13+s23,-1))*pow(s24,-1)+2*pow(s12+s13+s14,-1)*pow(s23,-1)*(-2*s12*s24*(2*s13+2*s14+6*s23+7*s24)-4*(3*s23+7*s24)*(s12*s12)-2*s13*(s24*s24)-2*s14*(s24*s24)-2*s23*(s24*s24)-16*pow(s12,3)+2*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(3*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)-2*(4*s12+s23+2*s24)*(2*s12*(s13*s24*(s13+s23+s24)+s23*(s14*s14))+s12*s12*(2*s13*(s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)+(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(s12*(6*s23+13*s24)+s24*(s13+s14+3*(s23+s24))+12*(s12*s12))*pow(s12+s13+s23,-1)-2*pow(s24,3))+pow(s12+s13+s14,-1)*pow(s23,-1)*(-4*s12*s13*s23-4*s12*s14*s23+4*s12*s23*s24+4*s13*s23*s24+4*s14*s23*s24-4*(s13+s14+s23-s24)*(s12*s12)+4*s24*(s23*s23)+4*s12*(s24*s24)+4*s13*(s24*s24)+4*s14*(s24*s24)+8*s23*(s24*s24)-4*pow(s12,3)+4*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(3*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)-4*(s12-s23-2*s24)*(s12*s12*(4*s14*s23+2*s13*(s14+s23)+s13*s13+s14*s14+s23*s23+s24*s24)+2*s12*(s14*s23*(s14+s23)+s13*(s14*s23+s24*s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)+2*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(s12*(s13+s14+s23-s24)+(s23+s24)*(s13+s14+s23+3*s24)+2*(s12*s12))*pow(s12+s13+s23,-1)+4*pow(s24,3))+pow(s13,-1)*(4*s12*s13*s14-4*s12*s13*s23+4*s13*s14*s23-4*s12*s13*s24+4*s13*s14*s24-4*(s13-s14+s23+s24)*(s12*s12)+4*s14*(s13*s13)+4*s12*(s14*s14)+8*s13*(s14*s14)+4*s23*(s14*s14)+4*s24*(s14*s14)-4*pow(s12,3)+4*pow(s14,3)+4*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(3*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)-4*(s12-s13-2*s14)*(2*s12*(s13*s24*(s13+s23+s24)+s23*(s14*s14))+s12*s12*(2*s13*(s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)+2*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(s12*(s13-s14+s23+s24)+(s13+s14)*(s13+3*s14+s23+s24)+2*(s12*s12))*pow(s12+s13+s23,-1))*pow(s12+s23+s24,-1)+2*pow(s13,-1)*(-2*s12*s14*(6*s13+7*s14+2*(s23+s24))-4*(3*s13+7*s14)*(s12*s12)-2*s13*(s14*s14)-2*s23*(s14*s14)-2*s24*(s14*s14)-16*pow(s12,3)-2*pow(s14,3)+2*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(3*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)-2*(4*s12+s13+2*s14)*(s12*s12*(4*s14*s23+2*s13*(s14+s23)+s13*s13+s14*s14+s23*s23+s24*s24)+2*s12*(s14*s23*(s14+s23)+s13*(s14*s23+s24*s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)+(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(s12*(6*s13+13*s14)+s14*(3*s13+3*s14+s23+s24)+12*(s12*s12))*pow(s12+s13+s23,-1))*pow(s12+s23+s24,-1)+2*(s12+s14)*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(s12*(2*s13+3*s14)+s14*(s13+s14+s23+s24)+2*(s12*s12))*pow(s13,-1)*pow((-s12-s13-s14),-1)*pow(s24,-1)*pow(s12+s23+s24,-1)-2*(s12+s13+s14)*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*pow(s13,-1)*pow((-s12-s23-s24),-1)+2*(s12+s24)*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(s24*(s13+s14+s23+s24)+s12*(2*s23+3*s24)+2*(s12*s12))*pow(s14,-1)*pow(s12+s13+s14,-1)*pow(s23,-1)*pow((-s12-s23-s24),-1)+2*(s13+s14)*(s12*(s13+s24)+(s13+s14)*(s14+s24)+s12*s12)*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*pow(s13,-1)*pow(s14,-1)*pow(s24,-1)*pow((-s12-s23-s24),-1))/8.;
}

// Coefficient order epsilon^1 of master 29
template<>
double qq2yygCAm2CF<29,1>(const double& s12, const double& s13, const double& s14, const double& s23, const double& s24)
{
    return (-((s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(2*s14*s23+3*s14*s24+s23*s24+s13*(3*s14+2*s23+3*s24)+s12*(5*s13+4*s14+2*s23+3*s24)+3*(s12*s12)+2*(s13*s13)+s14*s14+s24*s24)*pow(s13,-1)*pow((-s12-s13-s14),-1)*pow(s24,-1))-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(3*s14*s24-s23*s24+s13*(s14+s24)+s12*(s13+2*s14+s24)+s12*s12+s14*s14+s24*s24)*pow((-s12-s13-s14),-1)*pow(s23,-1)*pow(s24,-1)-pow(s13,-1)*(14*s12*s13*s14+8*s12*s13*s23+18*s12*s14*s23+4*s13*s14*s23+2*s12*s13*s24+18*s12*s14*s24+8*s12*s23*s24-4*s13*s23*s24+8*s14*s23*s24+2*(7*s13+10*s14+6*s23+4*s24)*(s12*s12)+4*s12*(s13*s13)-4*s24*(s13*s13)+14*s12*(s14*s14)+4*s13*(s14*s14)+6*s23*(s14*s14)+6*s24*(s14*s14)+6*s12*(s23*s23)+6*s14*(s23*s23)+2*s24*(s23*s23)+2*s12*(s24*s24)-4*s13*(s24*s24)+2*s14*(s24*s24)+2*s23*(s24*s24)+10*pow(s12,3)+4*pow(s14,3)+(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(6*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)-2*s12*(2*s13*s14*(3*s13+2*s23)*s24+s24*(2*s13+2*s23+s24)*(s13*s13)+2*s12*(s14*(s14*(s23+2*s24)+s23*(s23+5*s24))+s13*(s24*(4*s23+s24)+s14*(s23+8*s24))+5*s24*(s13*s13))+s14*s14*(4*s13*s24+4*s23*s24+s23*s23)+s12*s12*(6*s23*s24+2*s14*(2*s23+5*s24)+2*s13*(s14+s23+7*s24)+s13*s13+s14*s14+s23*s23+s24*s24)+2*(s13+s14+s23+3*s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(2*s14*s23+3*s14*s24+2*s23*s24+s13*(5*s14+4*s23+3*s24)+s12*(7*s13+4*(2*s14+s23+s24))+6*(s12*s12)+2*(s13*s13)+4*(s14*s14)+2*(s23*s23)+s24*s24)*pow(s12+s13+s23,-1))*pow(s24,-1)+pow(s12+s13+s14,-1)*pow(s23,-1)*(-8*s13*s14*s23-6*s13*s23*s24-2*s14*s23*s24-2*(s13-3*s14-4*s23-13*s24)*(s12*s12)-4*s14*(s13*s13)-4*s24*(s13*s13)+2*s13*(s14*s14)+2*s23*(s14*s14)+14*s24*(s14*s14)-6*s14*(s23*s23)-4*s24*(s23*s23)-2*s12*(s14*(s23-10*s24)+s13*(2*s23-s24)-4*s23*s24+s13*s13-6*(s14*s14)+s23*s23-9*(s24*s24))+2*s13*(s24*s24)+12*s14*(s24*s24)+12*pow(s12,3)+6*pow(s14,3)+(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(6*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)-2*s12*(s13*s13*(s24*s24)+2*s13*s14*(2*s23*s24+s23*s23+2*(s24*s24))+s14*s23*(s14*s23+6*s23*s24+2*(s23*s23)+4*(s24*s24))+2*s12*(s13*(s24*(s23+s24)+s14*(5*s23+6*s24))+s24*(s13*s13)+s14*(s14*s23+9*s23*s24+6*(s23*s23)+2*(s24*s24)))+s12*s12*(2*s13*(4*s14+s23+2*s24)+6*s14*(3*s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+2*(s13+4*s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(s14*s23+3*s14*s24+5*s23*s24+s13*(s14+s23+3*s24)+s12*(2*s13+3*s14+7*s23+13*s24)+10*(s12*s12)+s14*s14+s23*s23+4*(s24*s24))*pow(s12+s13+s23,-1)+4*pow(s24,3))-pow(s12+s13+s14,-1)*pow(s23,-1)*(-4*s13*s14*s24+4*s13*s23*s24+12*s14*s23*s24-2*(3*s13+2*s14-s23)*(s12*s12)-2*s14*(s13*s13)-2*s13*(s14*s14)+6*s23*(s14*s14)+2*s24*(s14*s14)+2*s14*(s23*s23)+4*s24*(s23*s23)-2*s12*(-7*s23*s24+s14*(-4*s23+s24)+s13*(2*s14+s23+2*s24)+s13*s13-s23*s23-2*(s24*s24))+6*s14*(s24*s24)+8*s23*(s24*s24)-4*pow(s12,3)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(6*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)+2*s12*(-2*s14*s24*(2*s13*(s23+s24)+s23*(s23+2*s24))-s13*s24*(2*s23*(s23+2*s24)+s13*(2*s23+3*s24))+s14*s14*(s23*s23)+2*s12*(-(s23*s24*(s23+2*s24))+s13*(s14*(s23+s24)-s24*(s23+3*s24))+s24*(s13*s13)+s23*(s14*s14)+s14*(s23*s23-2*(s24*s24)))+s12*s12*(2*s14*(2*s23+s24)+2*s13*(s14+s23+2*s24)+s13*s13+s14*s14+s23*s23-3*(s24*s24))+2*(s13+s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)+(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(3*s14*s24+3*s23*s24+s13*(2*s23+s24)+s12*(s13+s14+2*s23+3*s24)+2*(s12*s12)+s13*s13+s14*s14+s23*s23+4*(s24*s24))*pow(s12+s13+s23,-1)+4*pow(s24,3))+pow(s13,-1)*pow(s24,-1)*(22*s12*s13*s14+16*s12*s13*s23+30*s12*s14*s23+16*s13*s14*s23+28*s12*s13*s24+32*s12*s14*s24+26*s13*s14*s24+36*s12*s23*s24+16*s13*s23*s24+28*s14*s23*s24+2*(9*s13+10*(s14+s23+s24))*(s12*s12)+8*s12*(s13*s13)+8*(s14+s24)*(s13*s13)+6*s12*(s14*s14)+12*s13*(s14*s14)+10*s23*(s14*s14)+12*s24*(s14*s14)+10*s12*(s23*s23)+10*s14*(s23*s23)+10*s24*(s23*s23)+20*s12*(s24*s24)+12*s13*(s24*s24)+14*s14*(s24*s24)+16*s23*(s24*s24)+6*pow(s12,3)+4*pow(s14,3)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(6*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)+2*s12*(-2*s13*s14*(2*s14*(s23+s24)+s23*(s23+2*s24))+2*s12*(s14*(2*s23*(s23+s24)-s14*(3*s23+2*s24))+(-s14+s24)*(s13*s13)+s13*(s14*s24+s24*(s23+s24)-2*(s14*s14)))-s23*(3*s23+4*s24)*(s14*s14)+s13*s13*(-2*s14*(s23+s24)+s24*s24)+s12*s12*(4*s14*(2*s23+s24)+2*s13*(s14+s23+2*s24)+s13*s13-3*(s14*s14)+(s23+s24)*(s23+s24))+2*(s13+2*s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)+(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(-(s12*(s13+2*s14-2*s24))+3*s14*s24+s23*s24+s13*(3*s14+2*s24)+2*(s12*s12)+4*(s14*s14)+s24*s24)*pow(s12+s13+s23,-1)+6*pow(s24,3))-pow(s13,-1)*(14*s12*s13*s14-2*s12*s13*s23-4*s12*s14*s23+4*s13*s14*s23+8*s12*s13*s24-2*s12*s14*s24+12*s13*s14*s24-4*s12*s23*s24-4*s14*s23*s24+2*(s13-3*s23-2*s24)*(s12*s12)+2*s12*(s13*s13)+4*s14*(s13*s13)+2*s24*(s13*s13)+4*s12*(s14*s14)+8*s13*(s14*s14)+6*s24*(s14*s14)-2*s12*(s23*s23)-2*s24*(s23*s23)+6*s13*(s24*s24)+2*s14*(s24*s24)-2*s23*(s24*s24)-4*pow(s12,3)+4*pow(s14,3)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(6*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)+2*s12*(-2*s13*s14*(2*s14*(s23+s24)+s23*(s23+2*s24))-s23*(3*s23+4*s24)*(s14*s14)-2*s12*(s14*(-(s23*(s23+s24))+s14*(3*s23+2*s24))+(s14-s24)*(s13*s13)+s13*(s14*s23-s24*(s23+s24)+2*(s14*s14)))+s13*s13*(-2*s14*(s23+s24)+s24*s24)+s12*s12*(2*s14*(2*s23+s24)+2*s13*(s23+2*s24)+s13*s13-3*(s14*s14)+(s23+s24)*(s23+s24))+2*(s13+s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)+(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(s14*s23+s13*(3*s14+2*s23)+3*s14*s24+s12*(2*s13+3*s14+s23+s24)+2*(s12*s12)+s13*s13+4*(s14*s14)+s23*s23+s24*s24)*pow(s12+s13+s23,-1))*pow(s12+s23+s24,-1)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*pow(s12,-1)*pow(s13,-1)*(3*(s13+s14)*s24*(s14+s24)*(s13+s14+s23+s24)+s12*s12*(7*s23*s24+s13*(6*s14+s23+9*s24)+s14*(3*s23+16*s24)+s13*s13+6*(s14*s14)+s23*s23+11*(s24*s24))+(3*s13+6*s14+s23+6*s24)*pow(s12,3)+2*pow(s12,4)+s12*((s14+3*s24)*(s13*s13)+(2*s23+13*s24)*(s14*s14)+s13*(s24*(3*s23+11*s24)+s14*(s23+15*s24)+3*(s14*s14))+5*(s23+s24)*(s24*s24)+s14*(10*s23*s24+s23*s23+17*(s24*s24))+2*pow(s14,3)))*pow((-s12-s13-s14),-1)*pow(s24,-1)*pow(s12+s23+s24,-1)+pow(s13,-1)*(-6*s13*s14*s23-2*s13*s14*s24-8*s13*s23*s24+2*(4*s13+13*s14-s23+3*s24)*(s12*s12)-4*s14*(s13*s13)-6*s24*(s13*s13)+2*s23*(s14*s14)+12*s24*(s14*s14)-4*s14*(s23*s23)-4*s24*(s23*s23)-2*s12*(s13*(-4*s14+2*s23+s24)-s14*(s23+10*s24)+s13*s13-9*(s14*s14)+s23*s23-6*(s24*s24))+2*s13*(s24*s24)+14*s14*(s24*s24)+2*s23*(s24*s24)+12*pow(s12,3)+4*pow(s14,3)+(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(6*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)-2*s12*(2*s13*s14*(3*s13+2*s23)*s24+s24*(2*s13+2*s23+s24)*(s13*s13)+2*s12*(s14*(s14*(s23+2*s24)+s23*(s23+6*s24))+s13*(s24*(5*s23+s24)+s14*(s23+9*s24))+6*s24*(s13*s13))+s14*s14*(4*s13*s24+4*s23*s24+s23*s23)+s12*s12*(8*s23*s24+4*s14*(s23+3*s24)+2*s13*(s14+s23+9*s24)+s13*s13+s14*s14+s23*s23+s24*s24)+2*(s13+s14+s23+4*s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(3*s14*s23+3*s14*s24+s23*s24+s13*(5*s14+s23+s24)+s12*(7*s13+13*s14+2*s23+3*s24)+10*(s12*s12)+s13*s13+4*(s14*s14)+s24*s24)*pow(s12+s13+s23,-1)+6*pow(s24,3))*pow(s12+s23+s24,-1)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(-(s13*s14)+s14*s23+3*s14*s24+s23*s24+s12*(s14+s23+2*s24)+s12*s12+s14*s14+s24*s24)*pow(s13,-1)*pow(s14,-1)*pow((-s12-s23-s24),-1)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*pow(s12,-1)*pow(s14,-1)*(3*s14*(s14+s24)*(s23+s24)*(s13+s14+s23+s24)+s12*s12*(6*s23*s24+s13*(7*s14+s23+3*s24)+s14*(9*s23+16*s24)+s13*s13+11*(s14*s14)+s23*s23+6*(s24*s24))+(s13+6*s14+3*s23+6*s24)*pow(s12,3)+2*pow(s12,4)+s12*(s24*(s13*s13)+(11*s23+17*s24)*(s14*s14)+s13*(s24*(s23+2*s24)+s14*(3*s23+10*s24)+5*(s14*s14))+s24*(3*s23*s24+s23*s23+2*(s24*s24))+s14*(15*s23*s24+3*(s23*s23)+13*(s24*s24))+5*pow(s14,3)))*pow(s12+s13+s14,-1)*pow(s23,-1)*pow((-s12-s23-s24),-1)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*pow(s12,-1)*pow(s13,-1)*pow(s14,-1)*(-3*s14*(s14+s24)*(s23+s24)*(s13+s14+s23+s24)+s12*s12*(s13*(2*s14+2*s23+7*s24)+s13*s13+2*(s14*s24+4*s23*s24-s14*s14+s23*s23+3*(s24*s24)))+(4*s13+3*s14+4*s23+6*s24)*pow(s12,3)+2*pow(s12,4)+s12*(-(s13*(s14*(s23+s24)-s24*(2*s23+3*s24)))+(s14+s24)*(s13*s13)-(7*s23+8*s24)*(s14*s14)-s14*(6*s23*s24+s23*s23+4*(s24*s24))+2*s24*((s23+s24)*(s23+s24))-pow(s14,3)))*pow(s24,-1)*pow((-s12-s23-s24),-1))/4.;
}

// Coefficient order epsilon^2 of master 29
template<>
double qq2yygCAm2CF<29,2>(const double& s12, const double& s13, const double& s14, const double& s23, const double& s24)
{
    return ((s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*pow(s12,-1)*(3*(s13+s14)*(s14+s24)*(s13+s14+s23+s24)+(9*s13+10*s14+4*s23+5*s24)*(s12*s12)+s12*(3*s24*(s23+s24)+s13*(14*s14+5*s23+9*s24)+s14*(7*s23+11*s24)+5*(s13*s13)+9*(s14*s14))+4*pow(s12,3))*pow(s13,-1)*pow((-s12-s13-s14),-1)*pow(s24,-1)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(3*s24*(s14+s24)*(s13+s14+s23+s24)+s12*(s24*(5*s13+5*s23+6*s24)+s14*(s23+7*s24))+(s23+5*s24)*(s12*s12))*pow(s12,-1)*pow((-s12-s13-s14),-1)*pow(s23,-1)*pow(s24,-1)-pow(s12+s13+s14,-1)*pow(s23,-1)*(30*s12*s13*s14+12*s12*s13*s23+14*s12*s14*s23+10*s13*s14*s23+6*s12*s14*s24+6*s13*s14*s24-6*s12*s23*s24-2*s13*s23*s24-2*s14*s23*s24+4*(5*s13+6*s14+2*s23)*(s12*s12)+10*s12*(s13*s13)+6*s14*(s13*s13)-2*s24*(s13*s13)+20*s12*(s14*s14)+12*s13*(s14*s14)+6*s23*(s14*s14)+4*s24*(s14*s14)+4*s12*(s23*s23)+4*s14*(s23*s23)-10*s12*(s24*s24)-6*s13*(s24*s24)-10*s14*(s24*s24)-8*s23*(s24*s24)+10*pow(s12,3)+6*pow(s14,3)-3*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(4*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)+2*(2*s12-s23-2*s24)*(2*s12*(s13*(s14+s24)*(s23+s24)+s14*s23*(s14+s23+s24)+s24*(s13*s13))+s12*s12*(2*s14*(2*s23+s24)+2*s13*(s14+s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(s12*(9*s13+9*s14+6*s23+8*s24)+6*(s12*s12)+2*(2*s23*s24+3*s13*(s14+s23+s24)+2*s14*(s23+2*s24)+2*(s13*s13)+2*(s14*s14)+s23*s23+2*(s24*s24)))*pow(s12+s13+s23,-1)-8*pow(s24,3))+pow(s13,-1)*pow(s24,-1)*(36*s12*s13*s14+12*s12*s13*s23+12*s12*s14*s23+8*s13*s14*s23+14*s12*s13*s24+18*s12*s14*s24+18*s13*s14*s24-4*s12*s23*s24-2*s14*s23*s24+2*(11*s13+13*s14+4*s23+3*s24)*(s12*s12)+12*s12*(s13*s13)+8*s14*(s13*s13)+4*s24*(s13*s13)+24*s12*(s14*s14)+16*s13*(s14*s14)+4*s23*(s14*s14)+10*s24*(s14*s14)+4*s12*(s23*s23)+4*s14*(s23*s23)-2*s12*(s24*s24)+2*s13*(s24*s24)-4*s14*(s24*s24)-6*s23*(s24*s24)+10*pow(s12,3)+8*pow(s14,3)-3*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(4*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)+2*(4*s12+s13+2*s14)*(2*s12*(s13*(s14+s24)*(s23+s24)+s14*s23*(s14+s23+s24)+s24*(s13*s13))+s12*s12*(2*s14*(2*s23+s24)+2*s13*(s14+s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(s12*(6*s13+8*s14+4*s23+7*s24)+5*(s12*s12)+2*(s23*s24+2*s13*(s14+s23+s24)+s14*(s23+4*s24)+s13*s13+2*(s14*s14)+s23*s23+2*(s24*s24)))*pow(s12+s13+s23,-1)-6*pow(s24,3))-pow(s12+s13+s14,-1)*pow(s23,-1)*(24*s13*s14*s23+4*s13*s14*s24+40*s13*s23*s24+44*s14*s23*s24+2*(15*s13+14*s14+30*s23+29*s24)*(s12*s12)+8*s14*(s13*s13)+14*s24*(s13*s13)-6*s13*(s14*s14)+14*s23*(s14*s14)-20*s24*(s14*s14)+14*s14*(s23*s23)+24*s24*(s23*s23)+12*s13*(s24*s24)+2*s14*(s24*s24)+32*s23*(s24*s24)+2*s12*(45*s23*s24+s14*(25*s23+16*s24)+s13*(7*s14+24*s23+21*s24)+8*(s13*s13)+17*(s23*s23)+20*(s24*s24))+26*pow(s12,3)-14*pow(s14,3)-3*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(4*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)+2*(5*s12+s23+2*s24)*(2*s12*(s13*(s14+s24)*(s23+s24)+s14*s23*(s14+s23+s24)+s24*(s13*s13))+s12*s12*(2*s14*(2*s23+s24)+2*s13*(s14+s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(2*s14*s23+8*s14*s24+3*s23*s24+s13*(s14+8*s23+2*s24)+s12*(5*s13+6*s14+8*(s23+s24))+5*(s12*s12)+3*(s13*s13)+4*(s14*s14)+5*(s23*s23)+4*(s24*s24))*pow(s12+s13+s23,-1)+8*pow(s24,3))+pow(s13,-1)*pow(s24,-1)*(46*s12*s13*s14+60*s12*s13*s23+54*s12*s14*s23+24*s13*s14*s23+90*s12*s13*s24+68*s12*s14*s24+40*s13*s14*s24+102*s12*s23*s24+48*s13*s23*s24+44*s14*s23*s24+2*(28*s13+23*s14+34*s23+42*s24)*(s12*s12)+28*s12*(s13*s13)+4*(4*s14+7*s24)*(s13*s13)+14*s12*(s14*s14)+8*s13*(s14*s14)+10*s23*(s14*s14)-2*s24*(s14*s14)+34*s12*(s23*s23)+10*s14*(s23*s23)+22*s24*(s23*s23)+62*s12*(s24*s24)+34*s13*(s24*s24)+20*s14*(s24*s24)+36*s23*(s24*s24)+36*pow(s12,3)-8*pow(s14,3)-3*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(4*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)+2*(3*s12-s13-2*s14)*(2*s12*(s13*(s14+s24)*(s23+s24)+s14*s23*(s14+s23+s24)+s24*(s13*s13))+s12*s12*(2*s14*(2*s23+s24)+2*s13*(s14+s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(6*s14*s23+8*s14*s24+7*s23*s24+s13*(5*s14+12*s23+6*s24)+s12*(11*s13+8*s14+12*s23+10*s24)+7*(s12*s12)+6*(s13*s13)+4*(s14*s14)+6*(s23*s23)+4*(s24*s24))*pow(s12+s13+s23,-1)+14*pow(s24,3))+(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*pow(s12,-1)*pow(s13,-1)*(-7*(s13+s14)*s24*(s14+s24)*(s13+s14+s23+s24)+s12*s12*(s13*(18*s14+3*s23-10*s24)+2*s14*(2*s23-7*s24)-10*s23*s24+5*(s13*s13)+12*(s14*s14)+s23*s23-16*(s24*s24))+(9*s13+2*(6*s14+s23-2*s24))*pow(s12,3)+4*pow(s12,4)+s12*((5*s14-7*s24)*(s13*s13)+(2*s23-17*s24)*(s14*s14)+s13*(s14*(3*s23-23*s24)-4*s24*(2*s23+5*s24)+9*(s14*s14))+s14*(-17*s23*s24+s23*s23-30*(s24*s24))-11*(s23+s24)*(s24*s24)+4*pow(s14,3)))*pow((-s12-s13-s14),-1)*pow(s24,-1)*pow(s12+s23+s24,-1)-pow(s13,-1)*(40*s13*s14*s23+44*s13*s14*s24+24*s13*s23*s24+4*s14*s23*s24+2*(30*s13+29*s14+15*s23+14*s24)*(s12*s12)+24*s14*(s13*s13)+14*s24*(s13*s13)+32*s13*(s14*s14)+12*s23*(s14*s14)+2*s24*(s14*s14)+2*s12*(s23*(8*s23+7*s24)+s14*(21*s23+16*s24)+s13*(45*s14+24*s23+25*s24)+17*(s13*s13)+20*(s14*s14))+14*s14*(s23*s23)+8*s24*(s23*s23)+14*s13*(s24*s24)-20*s14*(s24*s24)-6*s23*(s24*s24)+26*pow(s12,3)+8*pow(s14,3)-3*(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(4*s12*(s12+s13+s14)*(s12+s13+s23)*s24+(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24)*(pow(s12,2)+s14*s23+s12*(s13+s14+s23-s24)-s13*s24))*pow(s12+s13+s23,-3)+2*(5*s12+s13+2*s14)*(2*s12*(s13*(s14+s24)*(s23+s24)+s14*s23*(s14+s23+s24)+s24*(s13*s13))+s12*s12*(2*s14*(2*s23+s24)+2*s13*(s14+s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(s14*s23+s12*(s13+s14+s23-s24)-s13*s24+s12*s12)*(2*s14*s23+8*s14*s24+s23*s24+s13*(3*s14+8*s23+2*s24)+s12*(8*s13+8*s14+5*s23+6*s24)+5*(s12*s12)+5*(s13*s13)+4*(s14*s14)+3*(s23*s23)+4*(s24*s24))*pow(s12+s13+s23,-1)-14*pow(s24,3))*pow(s12+s23+s24,-1)-pow(s13,-1)*(-6*s12*s13*s14+12*s12*s13*s23-2*s13*s14*s23+14*s12*s13*s24+6*s12*s14*s24-2*s13*s14*s24+30*s12*s23*s24+10*s13*s23*s24+6*s14*s23*s24+4*(2*s13+5*s23+6*s24)*(s12*s12)+4*s12*(s13*s13)+4*s24*(s13*s13)-10*s12*(s14*s14)-8*s13*(s14*s14)-6*s23*(s14*s14)-10*s24*(s14*s14)+10*s12*(s23*s23)-2*s14*(s23*s23)+6*s24*(s23*s23)+20*s12*(s24*s24)+6*s13*(s24*s24)+4*s14*(s24*s24)+12*s23*(s24*s24)+10*pow(s12,3)-8*pow(s14,3)-3*(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(4*s12*s14*(s12+s13+s23)*(s12+s23+s24)+(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24))*(pow(s12,2)-s14*s23+s13*s24+s12*(s13-s14+s23+s24)))*pow(s12+s13+s23,-3)+2*(2*s12-s13-2*s14)*(2*s12*(s13*(s14+s24)*(s23+s24)+s14*s23*(s14+s23+s24)+s24*(s13*s13))+s12*s12*(2*s14*(2*s23+s24)+2*s13*(s14+s23+2*s24)+s13*s13+s14*s14+(s23+s24)*(s23+s24))+(s14*s23-s13*s24)*(s14*s23-s13*s24)+2*(s13+s14+s23+s24)*pow(s12,3)+pow(s12,4))*pow(s12+s13+s23,-2)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(s12*(6*s13+8*s14+9*(s23+s24))+6*(s12*s12)+2*(3*s23*s24+s13*(2*s14+3*s23+2*s24)+s14*(3*s23+4*s24)+s13*s13+2*(s14*s14)+2*(s23*s23)+2*(s24*s24)))*pow(s12+s13+s23,-1)+6*pow(s24,3))*pow(s12+s23+s24,-1)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*(3*s14*(s14+s24)*(s13+s14+s23+s24)+s12*(s13*(5*s14+s24)+s14*(6*s14+5*s23+7*s24))+(s13+5*s14)*(s12*s12))*pow(s12,-1)*pow(s13,-1)*pow(s14,-1)*pow((-s12-s23-s24),-1)+(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*pow(s12,-1)*pow(s14,-1)*(-7*s14*(s14+s24)*(s23+s24)*(s13+s14+s23+s24)+s12*s12*(18*s23*s24+s13*(-10*s14+3*s23+4*s24)-2*s14*(5*s23+7*s24)+s13*s13-16*(s14*s14)+5*(s23*s23)+12*(s24*s24))+(2*s13-4*s14+9*s23+12*s24)*pow(s12,3)+4*pow(s12,4)+s12*(s24*(s13*s13)+s13*(s24*(3*s23+2*s24)-s14*(8*s23+17*s24)-11*(s14*s14))-10*(2*s23+3*s24)*(s14*s14)+s24*(9*s23*s24+5*(s23*s23)+4*(s24*s24))-s14*(23*s23*s24+7*(s23*s23)+17*(s24*s24))-11*pow(s14,3)))*pow(s12+s13+s14,-1)*pow(s23,-1)*pow((-s12-s23-s24),-1)-(-(s14*s23)+s13*s24+s12*(s13-s14+s23+s24)+s12*s12)*pow(s12,-1)*pow(s13,-1)*pow(s14,-1)*(-7*s14*(s14+s24)*(s23+s24)*(s13+s14+s23+s24)+s12*s12*(s13*(-10*s14+4*s23+6*s24)+s13*s13-2*(s14*(7*s23+9*s24)+9*(s14*s14)-2*(4*s23*s24+s23*s23+3*(s24*s24))))+(3*s13-6*s14+8*s23+12*s24)*pow(s12,3)+4*pow(s12,4)+s12*((s14+s24)*(s13*s13)+s13*(s24*(4*s23+3*s24)-s14*(9*s23+17*s24)-10*(s14*s14))-(23*s23+32*s24)*(s14*s14)-s14*(27*s23*s24+9*(s23*s23)+19*(s24*s24))+4*s24*((s23+s24)*(s23+s24))-11*pow(s14,3)))*pow(s24,-1)*pow((-s12-s23-s24),-1))/4.;
}

// Coefficient of master 29 as a series in epsilon
template<>
Expansion<Parameter::epsilon, double> qq2yygCAm2CF<29>(const double& s12, const double& s13, const double& s14, const double& s23, const double& s24)
{
    return Expansion<Parameter::epsilon, double>(0,{
        qq2yygCAm2CF<29,0>(s12,s13,s14,s23,s24),
        qq2yygCAm2CF<29,1>(s12,s13,s14,s23,s24),
        qq2yygCAm2CF<29,2>(s12,s13,s14,s23,s24)
    });
}

